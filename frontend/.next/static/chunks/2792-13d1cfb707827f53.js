"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2792],{80722:(t,a,e)=>{e.d(a,{F:()=>n.A});var n=e(31886)},85771:(t,a,e)=>{e.d(a,{u:()=>r});var n=e(80722);class i{async getAppointments(t){let a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:20,i=new URLSearchParams;if(t){var r;t.date_from&&i.append("date_from",t.date_from),t.date_to&&i.append("date_to",t.date_to),t.doctor_id&&i.append("doctor_id",t.doctor_id.toString()),t.patient_id&&i.append("patient_id",t.patient_id.toString()),(null==(r=t.status)?void 0:r.length)&&t.status.forEach(t=>i.append("status",t)),t.appointment_type&&i.append("appointment_type",t.appointment_type),t.room&&i.append("room",t.room),t.search&&i.append("search",t.search)}return i.append("page",a.toString()),i.append("per_page",e.toString()),(await n.F.get("".concat(this.baseUrl,"/?").concat(i.toString()))).data}async getAppointment(t){return(await n.F.get("".concat(this.baseUrl,"/").concat(t))).data}async createAppointment(t){return(await n.F.post(this.baseUrl,t)).data}async updateAppointment(t,a){return(await n.F.put("".concat(this.baseUrl,"/").concat(t),a)).data}async deleteAppointment(t){await n.F.delete("".concat(this.baseUrl,"/").concat(t))}async cancelAppointment(t,a){return(await n.F.patch("".concat(this.baseUrl,"/").concat(t,"/cancel"),{cancellation_reason:a})).data}async confirmAppointment(t){return(await n.F.patch("".concat(this.baseUrl,"/").concat(t,"/confirm"))).data}async startAppointment(t){return(await n.F.patch("".concat(this.baseUrl,"/").concat(t,"/start"))).data}async completeAppointment(t){return(await n.F.patch("".concat(this.baseUrl,"/").concat(t,"/complete"))).data}async markNoShow(t){return(await n.F.patch("".concat(this.baseUrl,"/").concat(t,"/no-show"))).data}async getStats(t){let a=new URLSearchParams;return t&&Object.entries(t).forEach(t=>{let[e,n]=t;null!=n&&(Array.isArray(n)?n.forEach(t=>a.append(e,t.toString())):a.append(e,n.toString()))}),(await n.F.get("".concat(this.baseUrl,"/stats?").concat(a.toString()))).data}async getMonthlyStats(t,a,e){let i=new URLSearchParams({year:t.toString(),month:a.toString()});return e&&Object.entries(e).forEach(t=>{let[a,e]=t;null!=e&&(Array.isArray(e)?e.forEach(t=>i.append(a,t.toString())):i.append(a,e.toString()))}),(await n.F.get("".concat(this.baseUrl,"/stats/monthly?").concat(i.toString()))).data}async getDoctorAvailability(t,a){return(await n.F.get("/doctors/".concat(t,"/availability?date=").concat(a))).data}async getAvailableSlots(t,a){let e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:30,i=arguments.length>3?arguments[3]:void 0,r=new URLSearchParams({date:a,duration:e.toString()});return i&&r.append("procedure_id",i.toString()),(await n.F.get("/doctors/".concat(t,"/available-slots?").concat(r.toString()))).data}async updateDoctorAvailability(t,a){return(await n.F.put("/doctors/".concat(t,"/availability"),a)).data}async validateAppointment(t){return(await n.F.post("".concat(this.baseUrl,"/validate"),t)).data}async checkConflicts(t,a,e,i,r){let o=new URLSearchParams({doctor_id:t.toString(),date:a,start_time:e,duration:i.toString()});return r&&o.append("exclude_id",r.toString()),(await n.F.get("".concat(this.baseUrl,"/check-conflicts?").concat(o.toString()))).data}async rescheduleAppointment(t){return(await n.F.post("".concat(this.baseUrl,"/").concat(t.appointment_id,"/reschedule"),{new_date:t.new_date,new_time:t.new_time,reason:t.reason,notify_patient:t.notify_patient})).data}async suggestRescheduleOptions(t,a){let e=new URLSearchParams;return(null==a?void 0:a.length)&&a.forEach(t=>e.append("preferred_dates",t)),(await n.F.get("".concat(this.baseUrl,"/").concat(t,"/reschedule-options?").concat(e.toString()))).data}async getWaitingList(t){return(await n.F.get("/waiting-list".concat(t?"?doctor_id=".concat(t):""))).data}async addToWaitingList(t){return(await n.F.post("/waiting-list",t)).data}async removeFromWaitingList(t){await n.F.delete("/waiting-list/".concat(t))}async notifyWaitingList(t,a){await n.F.post("/waiting-list/notify",{doctor_id:t,available_slot:a})}async getNotifications(t){let{userId:a,clinicId:e,status:i,types:r,priority:o,dateRange:c,limit:s=50}=t,d=new URLSearchParams;return a&&d.append("user_id",a.toString()),e&&d.append("clinic_id",e.toString()),s&&d.append("limit",s.toString()),i&&i.length>0&&i.forEach(t=>d.append("status",t)),r&&r.length>0&&r.forEach(t=>d.append("type",t)),o&&o.length>0&&o.forEach(t=>d.append("priority",t)),c&&(d.append("start_date",c.start),d.append("end_date",c.end)),(await n.F.get("/notifications?".concat(d.toString()))).data}async getNotificationSettings(t){return(await n.F.get("/notifications/settings/".concat(t))).data}async getNotificationStats(t,a){let e=new URLSearchParams;return t&&e.append("user_id",t.toString()),a&&e.append("clinic_id",a.toString()),(await n.F.get("/notifications/stats?".concat(e.toString()))).data}async markNotificationAsRead(t){await n.F.patch("/notifications/".concat(t,"/read"))}async deleteNotification(t){await n.F.delete("/notifications/".concat(t))}async updateNotificationSettings(t,a){return(await n.F.put("/notifications/settings/".concat(t),a)).data}async sendNotification(t){return(await n.F.post("/notifications/appointments",t)).data}async markNotificationsAsRead(t){await n.F.patch("/notifications/mark-read",{notification_ids:t})}async deleteNotifications(t){await n.F.delete("/notifications",{data:{notification_ids:t}})}async createAppointmentReminder(t,a,e){return(await n.F.post("/notifications/reminders",{appointment_id:t,reminder_time:a,message:e})).data}async cancelReminder(t){await n.F.delete("/notifications/reminders/".concat(t))}async sendReminders(t){return(await n.F.post("/notifications/appointments/reminders",{appointment_ids:t})).data}async getCalendarEvents(t){let{startDate:a,endDate:e,doctorIds:i,clinicIds:r,status:o,appointmentTypes:c,showCanceled:s=!1,showCompleted:d=!0}=t,p=new URLSearchParams({start_date:a,end_date:e});return i&&i.length>0&&i.forEach(t=>p.append("doctor_id",t.toString())),r&&r.length>0&&r.forEach(t=>p.append("clinic_id",t.toString())),o&&o.length>0&&o.forEach(t=>p.append("status",t)),c&&c.length>0&&c.forEach(t=>p.append("appointment_type",t)),p.append("show_canceled",s.toString()),p.append("show_completed",d.toString()),(await n.F.get("".concat(this.baseUrl,"/calendar?").concat(p.toString()))).data.map(t=>{var a,e;return{id:t.id,title:"".concat((null==(a=t.patient)?void 0:a.name)||"Paciente"," - ").concat((null==(e=t.procedure)?void 0:e.name)||"Consulta"),start:"".concat(t.appointment_date,"T").concat(t.start_time||"08:00"),end:"".concat(t.appointment_date,"T").concat(t.end_time||this.calculateEndTime(t.start_time||"08:00",t.duration||30)),appointment:t,color:this.getAppointmentColor(t.status),textColor:"#ffffff"}})}calculateEndTime(t,a){let[e,n]=t.split(":").map(Number),i=new Date;return i.setHours(e,n,0,0),i.setMinutes(i.getMinutes()+a),"".concat(i.getHours().toString().padStart(2,"0"),":").concat(i.getMinutes().toString().padStart(2,"0"))}getAppointmentColor(t){return({scheduled:"#3b82f6",confirmed:"#10b981",in_progress:"#f59e0b",completed:"#6b7280",cancelled:"#ef4444",no_show:"#dc2626",rescheduled:"#8b5cf6"})[t]||"#6b7280"}async getProcedures(){return(await n.F.get("/procedures")).data}async getProcedure(t){return(await n.F.get("/procedures/".concat(t))).data}async getRooms(){return(await n.F.get("/rooms")).data}async getAvailableRooms(t,a,e){let i=new URLSearchParams({date:t,start_time:a,end_time:e});return(await n.F.get("/rooms/available?".concat(i.toString()))).data}async getConsultationTypes(){return(await n.F.get("/consultation-types")).data}async exportAppointments(t){return(await n.F.post("/appointments/export",t,{responseType:"blob"})).data}async generateReport(t,a,e){let i=new URLSearchParams({start_date:t,end_date:a});return e&&i.append("doctor_id",e.toString()),(await n.F.get("".concat(this.baseUrl,"/report?").concat(i.toString()),{responseType:"blob"})).data}async searchAppointments(t,a){let e=new URLSearchParams({search:t});return a&&Object.entries(a).forEach(t=>{let[a,n]=t;null!=n&&(Array.isArray(n)?n.forEach(t=>e.append(a,t.toString())):e.append(a,n.toString()))}),(await n.F.get("".concat(this.baseUrl,"/search?").concat(e.toString()))).data}async quickBooking(t){return(await n.F.post("".concat(this.baseUrl,"/quick-booking"),t)).data}async bulkCreate(t){return(await n.F.post("".concat(this.baseUrl,"/bulk"),t)).data}async bulkUpdate(t,a){return(await n.F.patch("".concat(this.baseUrl,"/bulk"),{appointment_ids:t,updates:a})).data}async bulkCancel(t,a){return(await n.F.patch("".concat(this.baseUrl,"/bulk/cancel"),{appointment_ids:t,cancellation_reason:a})).data}async createTelemedicineAppointment(t){return(await n.F.post("/telemedicine/appointments",t)).data}async getTelemedicineLink(t){return(await n.F.get("/telemedicine/appointments/".concat(t,"/link"))).data}async getMetrics(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"month";return(await n.F.get("".concat(this.baseUrl,"/metrics?period=").concat(t))).data}async getBillableAppointments(t){let a=new URLSearchParams;if(t){var e;t.date_from&&a.append("date_from",t.date_from),t.date_to&&a.append("date_to",t.date_to),t.doctor_id&&a.append("doctor_id",t.doctor_id.toString()),t.patient_id&&a.append("patient_id",t.patient_id.toString()),(null==(e=t.status)?void 0:e.length)&&t.status.forEach(t=>a.append("status",t))}return(await n.F.get("".concat(this.baseUrl,"/billable?").concat(a.toString()))).data}async getUnbilledAppointments(t){let a=new URLSearchParams;return t&&(t.date_from&&a.append("date_from",t.date_from),t.date_to&&a.append("date_to",t.date_to),t.doctor_id&&a.append("doctor_id",t.doctor_id.toString()),t.patient_id&&a.append("patient_id",t.patient_id.toString())),(await n.F.get("".concat(this.baseUrl,"/unbilled?").concat(a.toString()))).data}async markAsBilled(t,a){return(await n.F.patch("".concat(this.baseUrl,"/").concat(t,"/mark-billed"),{invoice_id:a})).data}async markAsNonBillable(t,a){return(await n.F.patch("".concat(this.baseUrl,"/").concat(t,"/mark-non-billable"),{reason:a})).data}async getBillingStats(t){let a=new URLSearchParams;return t&&(t.date_from&&a.append("date_from",t.date_from),t.date_to&&a.append("date_to",t.date_to),t.doctor_id&&a.append("doctor_id",t.doctor_id.toString())),(await n.F.get("".concat(this.baseUrl,"/billing-stats?").concat(a.toString()))).data}async getAppointmentInvoice(t){try{return(await n.F.get("".concat(this.baseUrl,"/").concat(t,"/invoice"))).data}catch(t){var a;if((null==(a=t.response)?void 0:a.status)===404)return null;throw t}}async getPatientBillingHistory(t){let a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:10;return(await n.F.get("/patients/".concat(t,"/billing-history?limit=").concat(a))).data}constructor(){this.baseUrl="/appointments"}}let r=new i},88145:(t,a,e)=>{e.d(a,{E:()=>c});var n=e(95155);e(12115);var i=e(74466),r=e(53999);let o=(0,i.F)("inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",{variants:{variant:{default:"border-transparent bg-primary text-primary-foreground hover:bg-primary/80",secondary:"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",destructive:"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",outline:"text-foreground"}},defaultVariants:{variant:"default"}});function c(t){let{className:a,variant:e,...i}=t;return(0,n.jsx)("div",{className:(0,r.cn)(o({variant:e}),a),...i})}},89852:(t,a,e)=>{e.d(a,{p:()=>o});var n=e(95155),i=e(12115),r=e(53999);let o=i.forwardRef((t,a)=>{let{className:e,type:i,...o}=t;return(0,n.jsx)("input",{type:i,className:(0,r.cn)("flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",e),ref:a,...o})});o.displayName="Input"}}]);