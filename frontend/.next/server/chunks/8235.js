"use strict";exports.id=8235,exports.ids=[8235],exports.modules={24934:(a,b,c)=>{c.d(b,{$:()=>j,r:()=>i});var d=c(60687),e=c(43210),f=c(8730),g=c(24224),h=c(96241);let i=(0,g.F)("inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",{variants:{variant:{default:"bg-primary text-primary-foreground hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground hover:bg-destructive/90",outline:"border border-input bg-background hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-10 px-4 py-2",sm:"h-9 rounded-md px-3",lg:"h-11 rounded-md px-8",icon:"h-10 w-10"}},defaultVariants:{variant:"default",size:"default"}}),j=e.forwardRef(({className:a,variant:b,size:c,asChild:e=!1,...g},j)=>{let k=e?f.DX:"button";return(0,d.jsx)(k,{className:(0,h.cn)(i({variant:b,size:c,className:a})),ref:j,...g})});j.displayName="Button"},48459:(a,b,c)=>{c.d(b,{u:()=>f});var d=c(64298);class e{async getAppointments(a,b=1,c=20){let e=new URLSearchParams;return a&&(a.date_from&&e.append("date_from",a.date_from),a.date_to&&e.append("date_to",a.date_to),a.doctor_id&&e.append("doctor_id",a.doctor_id.toString()),a.patient_id&&e.append("patient_id",a.patient_id.toString()),a.status?.length&&a.status.forEach(a=>e.append("status",a)),a.appointment_type&&e.append("appointment_type",a.appointment_type),a.room&&e.append("room",a.room),a.search&&e.append("search",a.search)),e.append("page",b.toString()),e.append("per_page",c.toString()),(await d.F.get(`${this.baseUrl}/?${e.toString()}`)).data}async getAppointment(a){return(await d.F.get(`${this.baseUrl}/${a}`)).data}async createAppointment(a){return(await d.F.post(this.baseUrl,a)).data}async updateAppointment(a,b){return(await d.F.put(`${this.baseUrl}/${a}`,b)).data}async deleteAppointment(a){await d.F.delete(`${this.baseUrl}/${a}`)}async cancelAppointment(a,b){return(await d.F.patch(`${this.baseUrl}/${a}/cancel`,{cancellation_reason:b})).data}async confirmAppointment(a){return(await d.F.patch(`${this.baseUrl}/${a}/confirm`)).data}async startAppointment(a){return(await d.F.patch(`${this.baseUrl}/${a}/start`)).data}async completeAppointment(a){return(await d.F.patch(`${this.baseUrl}/${a}/complete`)).data}async markNoShow(a){return(await d.F.patch(`${this.baseUrl}/${a}/no-show`)).data}async getStats(a){let b=new URLSearchParams;return a&&Object.entries(a).forEach(([a,c])=>{null!=c&&(Array.isArray(c)?c.forEach(c=>b.append(a,c.toString())):b.append(a,c.toString()))}),(await d.F.get(`${this.baseUrl}/stats?${b.toString()}`)).data}async getMonthlyStats(a,b,c){let e=new URLSearchParams({year:a.toString(),month:b.toString()});return c&&Object.entries(c).forEach(([a,b])=>{null!=b&&(Array.isArray(b)?b.forEach(b=>e.append(a,b.toString())):e.append(a,b.toString()))}),(await d.F.get(`${this.baseUrl}/stats/monthly?${e.toString()}`)).data}async getDoctorAvailability(a,b){return(await d.F.get(`/doctors/${a}/availability?date=${b}`)).data}async getAvailableSlots(a,b,c=30,e){let f=new URLSearchParams({date:b,duration:c.toString()});return e&&f.append("procedure_id",e.toString()),(await d.F.get(`/doctors/${a}/available-slots?${f.toString()}`)).data}async updateDoctorAvailability(a,b){return(await d.F.put(`/doctors/${a}/availability`,b)).data}async validateAppointment(a){return(await d.F.post(`${this.baseUrl}/validate`,a)).data}async checkConflicts(a,b,c,e,f){let g=new URLSearchParams({doctor_id:a.toString(),date:b,start_time:c,duration:e.toString()});return f&&g.append("exclude_id",f.toString()),(await d.F.get(`${this.baseUrl}/check-conflicts?${g.toString()}`)).data}async rescheduleAppointment(a){return(await d.F.post(`${this.baseUrl}/${a.appointment_id}/reschedule`,{new_date:a.new_date,new_time:a.new_time,reason:a.reason,notify_patient:a.notify_patient})).data}async suggestRescheduleOptions(a,b){let c=new URLSearchParams;return b?.length&&b.forEach(a=>c.append("preferred_dates",a)),(await d.F.get(`${this.baseUrl}/${a}/reschedule-options?${c.toString()}`)).data}async getWaitingList(a){let b=a?`?doctor_id=${a}`:"";return(await d.F.get(`/waiting-list${b}`)).data}async addToWaitingList(a){return(await d.F.post("/waiting-list",a)).data}async removeFromWaitingList(a){await d.F.delete(`/waiting-list/${a}`)}async notifyWaitingList(a,b){await d.F.post("/waiting-list/notify",{doctor_id:a,available_slot:b})}async getNotifications({userId:a,clinicId:b,status:c,types:e,priority:f,dateRange:g,limit:h=50}){let i=new URLSearchParams;return a&&i.append("user_id",a.toString()),b&&i.append("clinic_id",b.toString()),h&&i.append("limit",h.toString()),c&&c.length>0&&c.forEach(a=>i.append("status",a)),e&&e.length>0&&e.forEach(a=>i.append("type",a)),f&&f.length>0&&f.forEach(a=>i.append("priority",a)),g&&(i.append("start_date",g.start),i.append("end_date",g.end)),(await d.F.get(`/notifications?${i.toString()}`)).data}async getNotificationSettings(a){return(await d.F.get(`/notifications/settings/${a}`)).data}async getNotificationStats(a,b){let c=new URLSearchParams;return a&&c.append("user_id",a.toString()),b&&c.append("clinic_id",b.toString()),(await d.F.get(`/notifications/stats?${c.toString()}`)).data}async markNotificationAsRead(a){await d.F.patch(`/notifications/${a}/read`)}async deleteNotification(a){await d.F.delete(`/notifications/${a}`)}async updateNotificationSettings(a,b){return(await d.F.put(`/notifications/settings/${a}`,b)).data}async sendNotification(a){return(await d.F.post("/notifications/appointments",a)).data}async markNotificationsAsRead(a){await d.F.patch("/notifications/mark-read",{notification_ids:a})}async deleteNotifications(a){await d.F.delete("/notifications",{data:{notification_ids:a}})}async createAppointmentReminder(a,b,c){return(await d.F.post("/notifications/reminders",{appointment_id:a,reminder_time:b,message:c})).data}async cancelReminder(a){await d.F.delete(`/notifications/reminders/${a}`)}async sendReminders(a){return(await d.F.post("/notifications/appointments/reminders",{appointment_ids:a})).data}async getCalendarEvents({startDate:a,endDate:b,doctorIds:c,clinicIds:e,status:f,appointmentTypes:g,showCanceled:h=!1,showCompleted:i=!0}){let j=new URLSearchParams({start_date:a,end_date:b});return c&&c.length>0&&c.forEach(a=>j.append("doctor_id",a.toString())),e&&e.length>0&&e.forEach(a=>j.append("clinic_id",a.toString())),f&&f.length>0&&f.forEach(a=>j.append("status",a)),g&&g.length>0&&g.forEach(a=>j.append("appointment_type",a)),j.append("show_canceled",h.toString()),j.append("show_completed",i.toString()),(await d.F.get(`${this.baseUrl}/calendar?${j.toString()}`)).data.map(a=>({id:a.id,title:`${a.patient?.name||"Paciente"} - ${a.procedure?.name||"Consulta"}`,start:`${a.appointment_date}T${a.start_time||"08:00"}`,end:`${a.appointment_date}T${a.end_time||this.calculateEndTime(a.start_time||"08:00",a.duration||30)}`,appointment:a,color:this.getAppointmentColor(a.status),textColor:"#ffffff"}))}calculateEndTime(a,b){let[c,d]=a.split(":").map(Number),e=new Date;return e.setHours(c,d,0,0),e.setMinutes(e.getMinutes()+b),`${e.getHours().toString().padStart(2,"0")}:${e.getMinutes().toString().padStart(2,"0")}`}getAppointmentColor(a){return({scheduled:"#3b82f6",confirmed:"#10b981",in_progress:"#f59e0b",completed:"#6b7280",cancelled:"#ef4444",no_show:"#dc2626",rescheduled:"#8b5cf6"})[a]||"#6b7280"}async getProcedures(){return(await d.F.get("/procedures")).data}async getProcedure(a){return(await d.F.get(`/procedures/${a}`)).data}async getRooms(){return(await d.F.get("/rooms")).data}async getAvailableRooms(a,b,c){let e=new URLSearchParams({date:a,start_time:b,end_time:c});return(await d.F.get(`/rooms/available?${e.toString()}`)).data}async getConsultationTypes(){return(await d.F.get("/consultation-types")).data}async exportAppointments(a){return(await d.F.post("/appointments/export",a,{responseType:"blob"})).data}async generateReport(a,b,c){let e=new URLSearchParams({start_date:a,end_date:b});return c&&e.append("doctor_id",c.toString()),(await d.F.get(`${this.baseUrl}/report?${e.toString()}`,{responseType:"blob"})).data}async searchAppointments(a,b){let c=new URLSearchParams({search:a});return b&&Object.entries(b).forEach(([a,b])=>{null!=b&&(Array.isArray(b)?b.forEach(b=>c.append(a,b.toString())):c.append(a,b.toString()))}),(await d.F.get(`${this.baseUrl}/search?${c.toString()}`)).data}async quickBooking(a){return(await d.F.post(`${this.baseUrl}/quick-booking`,a)).data}async bulkCreate(a){return(await d.F.post(`${this.baseUrl}/bulk`,a)).data}async bulkUpdate(a,b){return(await d.F.patch(`${this.baseUrl}/bulk`,{appointment_ids:a,updates:b})).data}async bulkCancel(a,b){return(await d.F.patch(`${this.baseUrl}/bulk/cancel`,{appointment_ids:a,cancellation_reason:b})).data}async createTelemedicineAppointment(a){return(await d.F.post("/telemedicine/appointments",a)).data}async getTelemedicineLink(a){return(await d.F.get(`/telemedicine/appointments/${a}/link`)).data}async getMetrics(a="month"){return(await d.F.get(`${this.baseUrl}/metrics?period=${a}`)).data}async getBillableAppointments(a){let b=new URLSearchParams;return a&&(a.date_from&&b.append("date_from",a.date_from),a.date_to&&b.append("date_to",a.date_to),a.doctor_id&&b.append("doctor_id",a.doctor_id.toString()),a.patient_id&&b.append("patient_id",a.patient_id.toString()),a.status?.length&&a.status.forEach(a=>b.append("status",a))),(await d.F.get(`${this.baseUrl}/billable?${b.toString()}`)).data}async getUnbilledAppointments(a){let b=new URLSearchParams;return a&&(a.date_from&&b.append("date_from",a.date_from),a.date_to&&b.append("date_to",a.date_to),a.doctor_id&&b.append("doctor_id",a.doctor_id.toString()),a.patient_id&&b.append("patient_id",a.patient_id.toString())),(await d.F.get(`${this.baseUrl}/unbilled?${b.toString()}`)).data}async markAsBilled(a,b){return(await d.F.patch(`${this.baseUrl}/${a}/mark-billed`,{invoice_id:b})).data}async markAsNonBillable(a,b){return(await d.F.patch(`${this.baseUrl}/${a}/mark-non-billable`,{reason:b})).data}async getBillingStats(a){let b=new URLSearchParams;return a&&(a.date_from&&b.append("date_from",a.date_from),a.date_to&&b.append("date_to",a.date_to),a.doctor_id&&b.append("doctor_id",a.doctor_id.toString())),(await d.F.get(`${this.baseUrl}/billing-stats?${b.toString()}`)).data}async getAppointmentInvoice(a){try{return(await d.F.get(`${this.baseUrl}/${a}/invoice`)).data}catch(a){if(a.response?.status===404)return null;throw a}}async getPatientBillingHistory(a,b=10){return(await d.F.get(`/patients/${a}/billing-history?limit=${b}`)).data}constructor(){this.baseUrl="/appointments"}}let f=new e},59556:(a,b,c)=>{c.d(b,{A:()=>g,O:()=>h});var d=c(51060),e=c(52581);let f=d.A.create({baseURL:"http://localhost:8000",timeout:1e4,headers:{"Content-Type":"application/json"}});f.interceptors.request.use(a=>{let b=localStorage.getItem("token");return b&&(a.headers.Authorization=`Bearer ${b}`),a},a=>Promise.reject(a)),f.interceptors.response.use(a=>a,a=>{let{response:b}=a;return b?.status===401?(localStorage.removeItem("token"),localStorage.removeItem("user"),e.o.error("Sess\xe3o expirada. Fa\xe7a login novamente."),window.location.href="/auth/login"):b?.status===403?e.o.error("Acesso negado."):b?.status===404?e.o.error("Recurso n\xe3o encontrado."):b?.status>=500?e.o.error("Erro interno do servidor. Tente novamente mais tarde."):"ECONNABORTED"===a.code?e.o.error("Tempo limite da requisi\xe7\xe3o excedido."):e.o.error(b?.data?.message||"Erro inesperado."),Promise.reject(a)});let g=f,h={get:async(a,b)=>(await f.get(a,{params:b})).data,post:async(a,b)=>(await f.post(a,b)).data,put:async(a,b)=>(await f.put(a,b)).data,delete:async a=>(await f.delete(a)).data,patch:async(a,b)=>(await f.patch(a,b)).data}},59821:(a,b,c)=>{c.d(b,{E:()=>h});var d=c(60687);c(43210);var e=c(24224),f=c(96241);let g=(0,e.F)("inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",{variants:{variant:{default:"border-transparent bg-primary text-primary-foreground hover:bg-primary/80",secondary:"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",destructive:"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",outline:"text-foreground"}},defaultVariants:{variant:"default"}});function h({className:a,variant:b,...c}){return(0,d.jsx)("div",{className:(0,f.cn)(g({variant:b}),a),...c})}},64298:(a,b,c)=>{c.d(b,{F:()=>d.A});var d=c(59556)},68988:(a,b,c)=>{c.d(b,{p:()=>g});var d=c(60687),e=c(43210),f=c(96241);let g=e.forwardRef(({className:a,type:b,...c},e)=>(0,d.jsx)("input",{type:b,className:(0,f.cn)("flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",a),ref:e,...c}));g.displayName="Input"},96241:(a,b,c)=>{c.d(b,{Yq:()=>g,cn:()=>f,r6:()=>h});var d=c(49384),e=c(82348);function f(...a){return(0,e.QP)((0,d.$)(a))}function g(a){return new Intl.DateTimeFormat("pt-BR",{day:"2-digit",month:"2-digit",year:"numeric"}).format(new Date(a))}function h(a){return new Intl.DateTimeFormat("pt-BR",{day:"2-digit",month:"2-digit",year:"numeric",hour:"2-digit",minute:"2-digit"}).format(new Date(a))}}};