// Tipos para Sistema de Auditoria e Logs Avançado

// Enums para categorização
export enum ActionType {
  CREATE = 'CREATE',
  READ = 'READ',
  UPDATE = 'UPDATE',
  DELETE = 'DELETE',
  LOGIN = 'LOGIN',
  LOGOUT = 'LOGOUT',
  EXPORT = 'EXPORT',
  IMPORT = 'IMPORT',
  BACKUP = 'BACKUP',
  RESTORE = 'RESTORE',
  PERMISSION_CHANGE = 'PERMISSION_CHANGE',
  SYSTEM_CONFIG = 'SYSTEM_CONFIG',
  DATA_ACCESS = 'DATA_ACCESS',
  FAILED_LOGIN = 'FAILED_LOGIN',
  PASSWORD_CHANGE = 'PASSWORD_CHANGE',
  ROLE_ASSIGNMENT = 'ROLE_ASSIGNMENT'
}

export enum SeverityLevel {
  LOW = 'LOW',
  MEDIUM = 'MEDIUM',
  HIGH = 'HIGH',
  CRITICAL = 'CRITICAL'
}

export enum EventCategory {
  AUTHENTICATION = 'AUTHENTICATION',
  AUTHORIZATION = 'AUTHORIZATION',
  DATA_MODIFICATION = 'DATA_MODIFICATION',
  SYSTEM_ADMINISTRATION = 'SYSTEM_ADMINISTRATION',
  DATA_EXPORT = 'DATA_EXPORT',
  SECURITY_INCIDENT = 'SECURITY_INCIDENT',
  COMPLIANCE = 'COMPLIANCE',
  BACKUP_RESTORE = 'BACKUP_RESTORE',
  USER_MANAGEMENT = 'USER_MANAGEMENT',
  CONFIGURATION = 'CONFIGURATION'
}

export enum ComplianceStandard {
  LGPD = 'LGPD',
  HIPAA = 'HIPAA',
  ISO27001 = 'ISO27001',
  SOX = 'SOX',
  GDPR = 'GDPR'
}

export enum AuditStatus {
  SUCCESS = 'SUCCESS',
  FAILURE = 'FAILURE',
  WARNING = 'WARNING',
  BLOCKED = 'BLOCKED'
}

// Interface principal para logs de auditoria
export interface AuditLog {
  id: string
  timestamp: Date
  userId?: string
  userName?: string
  userRole?: string
  sessionId?: string
  ipAddress: string
  userAgent?: string
  location?: {
    country?: string
    city?: string
    coordinates?: {
      lat: number
      lng: number
    }
  }
  actionType: ActionType
  category: EventCategory
  severity: SeverityLevel
  status: AuditStatus
  resource: string
  resourceId?: string
  module: string
  description: string
  details?: Record<string, any>
  oldValues?: Record<string, any>
  newValues?: Record<string, any>
  metadata?: {
    requestId?: string
    correlationId?: string
    duration?: number
    errorCode?: string
    errorMessage?: string
    stackTrace?: string
  }
  hash?: string // Para integridade dos logs
  encrypted?: boolean
  complianceFlags?: ComplianceStandard[]
  retentionDate?: Date
  tags?: string[]
}

// Interface para eventos de segurança
export interface SecurityEvent {
  id: string
  timestamp: Date
  type: 'INTRUSION_ATTEMPT' | 'SUSPICIOUS_ACTIVITY' | 'POLICY_VIOLATION' | 'ANOMALY_DETECTED' | 'THREAT_DETECTED'
  severity: SeverityLevel
  source: {
    ipAddress: string
    userAgent?: string
    userId?: string
    location?: {
      country?: string
      city?: string
    }
  }
  target: {
    resource: string
    module: string
    endpoint?: string
  }
  description: string
  indicators: {
    failedAttempts?: number
    suspiciousPatterns?: string[]
    riskScore?: number
    confidence?: number
  }
  response: {
    action: 'BLOCKED' | 'MONITORED' | 'ALERTED' | 'QUARANTINED'
    automated: boolean
    notificationsSent?: string[]
  }
  investigation: {
    status: 'OPEN' | 'IN_PROGRESS' | 'RESOLVED' | 'FALSE_POSITIVE'
    assignedTo?: string
    notes?: string
    resolution?: string
  }
  relatedEvents?: string[] // IDs de eventos relacionados
}

// Interface para relatórios de compliance
export interface ComplianceReport {
  id: string
  title: string
  standard: ComplianceStandard
  period: {
    startDate: Date
    endDate: Date
  }
  generatedAt: Date
  generatedBy: string
  status: 'DRAFT' | 'PENDING_REVIEW' | 'APPROVED' | 'PUBLISHED'
  summary: {
    totalEvents: number
    complianceScore: number
    criticalIssues: number
    resolvedIssues: number
    pendingIssues: number
  }
  sections: ComplianceSection[]
  recommendations: Recommendation[]
  attachments?: {
    fileName: string
    fileType: string
    fileSize: number
    downloadUrl: string
  }[]
  metadata: {
    version: string
    template: string
    autoGenerated: boolean
    reviewers?: string[]
    approvers?: string[]
  }
}

export interface ComplianceSection {
  id: string
  title: string
  requirement: string
  status: 'COMPLIANT' | 'NON_COMPLIANT' | 'PARTIALLY_COMPLIANT' | 'NOT_APPLICABLE'
  evidence: {
    description: string
    auditLogIds: string[]
    documentReferences?: string[]
  }[]
  gaps?: {
    description: string
    severity: SeverityLevel
    remediation: string
    dueDate?: Date
  }[]
  score: number
}

export interface Recommendation {
  id: string
  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL'
  category: string
  title: string
  description: string
  impact: string
  effort: 'LOW' | 'MEDIUM' | 'HIGH'
  timeline: string
  assignedTo?: string
  status: 'OPEN' | 'IN_PROGRESS' | 'COMPLETED' | 'DEFERRED'
  dueDate?: Date
}

// Interface para filtros de auditoria
export interface AuditFilters {
  dateRange?: {
    startDate: Date
    endDate: Date
  }
  users?: string[]
  actions?: ActionType[]
  categories?: EventCategory[]
  severity?: SeverityLevel[]
  status?: AuditStatus[]
  modules?: string[]
  ipAddresses?: string[]
  searchText?: string
  tags?: string[]
  complianceStandards?: ComplianceStandard[]
  limit?: number
  offset?: number
  userId?: string
  action?: ActionType[]
  category?: EventCategory[]
  startDate?: Date
  endDate?: Date
  search?: string
  ipAddress?: string
  module?: string
}

// Interface para estatísticas de auditoria
export interface AuditStatistics {
  totalEvents: number
  eventsByCategory: Record<EventCategory, number>
  eventsBySeverity: Record<SeverityLevel, number>
  eventsByStatus: Record<AuditStatus, number>
  topUsers: {
    userId: string
    userName: string
    eventCount: number
  }[]
  topModules: {
    module: string
    eventCount: number
  }[]
  timelineData: {
    date: string
    count: number
    severity: Record<SeverityLevel, number>
  }[]
  securityMetrics: {
    failedLogins: number
    suspiciousActivities: number
    blockedAttempts: number
    riskScore: number
  }
}

// Interface para configurações de auditoria
export interface AuditSettings {
  retention: {
    defaultDays: number
    byCategory: Record<EventCategory, number>
    complianceOverride: boolean
  }
  monitoring: {
    realTimeAlerts: boolean
    emailNotifications: boolean
    webhookUrl?: string
    alertThresholds: {
      failedLogins: number
      suspiciousActivity: number
      criticalEvents: number
    }
  }
  encryption: {
    enabled: boolean
    algorithm: string
    keyRotationDays: number
  }
  compliance: {
    standards: ComplianceStandard[]
    autoReporting: boolean
    reportSchedule?: string // cron expression
  }
  performance: {
    batchSize: number
    indexingEnabled: boolean
    archiveAfterDays: number
  }
}

// Interface para exportação de dados
export interface AuditExportRequest {
  format: 'PDF' | 'EXCEL' | 'CSV' | 'JSON'
  filters: AuditFilters
  includeDetails: boolean
  includeMetadata: boolean
  compression?: boolean
  password?: string
  template?: string
}

export interface AuditExportResult {
  id: string
  status: 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'FAILED'
  progress: number
  downloadUrl?: string
  fileName?: string
  fileSize?: number
  expiresAt?: Date
  error?: string
}

// Interface para alertas de segurança
export interface SecurityAlert {
  id: string
  timestamp: Date
  type: 'REAL_TIME' | 'SCHEDULED' | 'THRESHOLD_EXCEEDED'
  severity: SeverityLevel
  title: string
  message: string
  source: {
    module: string
    rule: string
    eventIds: string[]
  }
  recipients: string[]
  channels: ('EMAIL' | 'SMS' | 'WEBHOOK' | 'IN_APP')[]
  status: 'SENT' | 'PENDING' | 'FAILED' | 'ACKNOWLEDGED'
  acknowledgedBy?: string
  acknowledgedAt?: Date
  escalated?: boolean
  escalationLevel?: number
}

// Interface para timeline de eventos
export interface AuditTimelineEvent {
  id: string
  timestamp: Date
  type: ActionType
  category: EventCategory
  severity: SeverityLevel
  user: {
    id: string
    name: string
    role: string
  }
  resource: string
  description: string
  icon: string
  color: string
  details?: Record<string, any>
  relatedEvents?: string[]
}

// Tipos para respostas da API
export interface AuditApiResponse<T> {
  success: boolean
  data?: T
  error?: string
  pagination?: {
    page: number
    limit: number
    total: number
    totalPages: number
  }
  metadata?: {
    timestamp: Date
    requestId: string
    version: string
  }
}

export type AuditLogsResponse = AuditApiResponse<{
  logs: AuditLog[]
  statistics: AuditStatistics
}>

export type SecurityEventsResponse = AuditApiResponse<{
  events: SecurityEvent[]
  summary: {
    total: number
    open: number
    resolved: number
    falsePositives: number
  }
}>

export type ComplianceReportsResponse = AuditApiResponse<{
  reports: ComplianceReport[]
  summary: {
    totalReports: number
    averageScore: number
    pendingReviews: number
  }
}>