# =============================================================================
# Docker Compose para Ambiente de Testes
# DataClinica - Configuração para testes E2E e performance
# =============================================================================

version: '3.8'

services:
  # =============================================================================
  # BACKEND - API FastAPI
  # =============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dataclinica_backend_test
    environment:
      # Configurações básicas
      - ENVIRONMENT=test
      - DEBUG=true
      - API_VERSION=1.0.0
      
      # Banco de dados
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/dataclinica_test
      - DB_ECHO=false
      
      # Redis
      - REDIS_URL=redis://redis:6379/0
      
      # Segurança
      - SECRET_KEY=test-secret-key-for-e2e-tests
      - JWT_SECRET_KEY=test-jwt-secret-key
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      
      # CORS
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000
      
      # Rate limiting
      - RATE_LIMIT_ENABLED=false
      
      # Logs
      - LOG_LEVEL=INFO
      
      # Testes
      - TESTING=true
      - TEST_DATABASE_URL=postgresql://postgres:postgres@db:5432/dataclinica_test
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dataclinica_test
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # =============================================================================
  # FRONTEND - React
  # =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=test
    container_name: dataclinica_frontend_test
    environment:
      - NODE_ENV=test
      - REACT_APP_API_URL=http://backend:8000
      - REACT_APP_ENVIRONMENT=test
      - REACT_APP_VERSION=1.0.0
      - GENERATE_SOURCEMAP=false
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - dataclinica_test
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # =============================================================================
  # BANCO DE DADOS - PostgreSQL
  # =============================================================================
  db:
    image: postgres:15-alpine
    container_name: dataclinica_db_test
    environment:
      - POSTGRES_DB=dataclinica_test
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./backend/scripts/init-test-db.sql:/docker-entrypoint-initdb.d/init-test-db.sql:ro
    networks:
      - dataclinica_test
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dataclinica_test"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=128MB
      -c effective_cache_size=256MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # =============================================================================
  # REDIS - Cache e Sessões
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: dataclinica_redis_test
    ports:
      - "6379:6379"
    volumes:
      - redis_test_data:/data
    networks:
      - dataclinica_test
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 128mb
      --maxmemory-policy allkeys-lru

  # =============================================================================
  # MAILHOG - Servidor de email para testes
  # =============================================================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: dataclinica_mailhog_test
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - dataclinica_test
    restart: unless-stopped

  # =============================================================================
  # NGINX - Proxy reverso para testes
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: dataclinica_nginx_test
    ports:
      - "80:80"
    volumes:
      - ./nginx/test.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
      - frontend
    networks:
      - dataclinica_test
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =============================================================================
  # SELENIUM - Para testes E2E
  # =============================================================================
  selenium:
    image: selenium/standalone-chrome:latest
    container_name: dataclinica_selenium_test
    ports:
      - "4444:4444"
      - "7900:7900"  # VNC
    environment:
      - SE_VNC_NO_PASSWORD=1
      - SE_NODE_MAX_INSTANCES=2
      - SE_NODE_MAX_SESSIONS=2
    volumes:
      - /dev/shm:/dev/shm
    networks:
      - dataclinica_test
    restart: unless-stopped

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_test_data:
    driver: local
  redis_test_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  dataclinica_test:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16