"""Add companions, visitors, medical devices and analytics models

Revision ID: 3f4e789dea4a
Revises: de3dccdb9fb0
Create Date: 2025-08-08 20:19:33.585950

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '3f4e789dea4a'
down_revision = 'de3dccdb9fb0'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('visitors',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('clinic_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('cpf', sa.String(length=14), nullable=True),
    sa.Column('rg', sa.String(length=20), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('photo_path', sa.String(length=500), nullable=True),
    sa.Column('is_blacklisted', sa.Boolean(), nullable=True),
    sa.Column('blacklist_reason', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinics.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_visitors_cpf'), 'visitors', ['cpf'], unique=False)
    op.create_index(op.f('ix_visitors_id'), 'visitors', ['id'], unique=False)
    op.create_table('diagnostic_patterns',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('clinic_id', sa.Integer(), nullable=False),
    sa.Column('pattern_name', sa.String(length=255), nullable=False),
    sa.Column('symptoms', sa.JSON(), nullable=False),
    sa.Column('suggested_diagnoses', sa.JSON(), nullable=False),
    sa.Column('confidence_threshold', sa.Numeric(precision=5, scale=4), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=True),
    sa.Column('success_rate', sa.Numeric(precision=5, scale=4), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinics.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_diagnostic_patterns_id'), 'diagnostic_patterns', ['id'], unique=False)
    op.create_table('medical_devices',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('clinic_id', sa.Integer(), nullable=False),
    sa.Column('device_name', sa.String(length=255), nullable=False),
    sa.Column('device_type', sa.String(length=100), nullable=False),
    sa.Column('manufacturer', sa.String(length=255), nullable=True),
    sa.Column('model', sa.String(length=255), nullable=True),
    sa.Column('serial_number', sa.String(length=255), nullable=True),
    sa.Column('mac_address', sa.String(length=17), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('connection_type', sa.String(length=50), nullable=True),
    sa.Column('protocol', sa.String(length=50), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('last_calibration', sa.DateTime(), nullable=True),
    sa.Column('next_calibration', sa.DateTime(), nullable=True),
    sa.Column('location', sa.String(length=255), nullable=True),
    sa.Column('responsible_user_id', sa.Integer(), nullable=True),
    sa.Column('configuration', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinics.id'], ),
    sa.ForeignKeyConstraint(['responsible_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_medical_devices_id'), 'medical_devices', ['id'], unique=False)
    op.create_index(op.f('ix_medical_devices_serial_number'), 'medical_devices', ['serial_number'], unique=True)
    op.create_table('predictive_models',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('clinic_id', sa.Integer(), nullable=False),
    sa.Column('model_name', sa.String(length=255), nullable=False),
    sa.Column('model_type', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('algorithm', sa.String(length=100), nullable=True),
    sa.Column('version', sa.String(length=50), nullable=True),
    sa.Column('accuracy_score', sa.Numeric(precision=5, scale=4), nullable=True),
    sa.Column('training_data_size', sa.Integer(), nullable=True),
    sa.Column('last_training', sa.DateTime(), nullable=True),
    sa.Column('model_file_path', sa.String(length=500), nullable=True),
    sa.Column('feature_config', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinics.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_predictive_models_id'), 'predictive_models', ['id'], unique=False)
    op.create_table('scheduling_optimizations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('clinic_id', sa.Integer(), nullable=False),
    sa.Column('optimization_date', sa.Date(), nullable=False),
    sa.Column('doctor_id', sa.Integer(), nullable=True),
    sa.Column('total_slots', sa.Integer(), nullable=True),
    sa.Column('occupied_slots', sa.Integer(), nullable=True),
    sa.Column('no_show_predictions', sa.JSON(), nullable=True),
    sa.Column('overbooking_suggestions', sa.JSON(), nullable=True),
    sa.Column('optimal_schedule', sa.JSON(), nullable=True),
    sa.Column('efficiency_score', sa.Numeric(precision=5, scale=4), nullable=True),
    sa.Column('predicted_revenue', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('actual_revenue', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('applied', sa.Boolean(), nullable=True),
    sa.Column('applied_at', sa.DateTime(), nullable=True),
    sa.Column('applied_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['applied_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinics.id'], ),
    sa.ForeignKeyConstraint(['doctor_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_scheduling_optimizations_id'), 'scheduling_optimizations', ['id'], unique=False)
    op.create_table('companions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('clinic_id', sa.Integer(), nullable=False),
    sa.Column('patient_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('cpf', sa.String(length=14), nullable=True),
    sa.Column('rg', sa.String(length=20), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('relationship_type', sa.String(length=100), nullable=True),
    sa.Column('is_authorized', sa.Boolean(), nullable=True),
    sa.Column('photo_path', sa.String(length=500), nullable=True),
    sa.Column('emergency_contact', sa.Boolean(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinics.id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_companions_cpf'), 'companions', ['cpf'], unique=False)
    op.create_index(op.f('ix_companions_id'), 'companions', ['id'], unique=False)
    op.create_table('device_integrations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('device_id', sa.Integer(), nullable=False),
    sa.Column('integration_name', sa.String(length=255), nullable=False),
    sa.Column('integration_type', sa.String(length=100), nullable=False),
    sa.Column('endpoint_url', sa.String(length=500), nullable=True),
    sa.Column('authentication_config', sa.JSON(), nullable=True),
    sa.Column('mapping_config', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('last_sync', sa.DateTime(), nullable=True),
    sa.Column('sync_frequency', sa.Integer(), nullable=True),
    sa.Column('error_count', sa.Integer(), nullable=True),
    sa.Column('last_error', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['medical_devices.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_device_integrations_id'), 'device_integrations', ['id'], unique=False)
    op.create_table('model_predictions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.Column('patient_id', sa.Integer(), nullable=True),
    sa.Column('prediction_date', sa.DateTime(), nullable=True),
    sa.Column('prediction_type', sa.String(length=100), nullable=False),
    sa.Column('prediction_value', sa.JSON(), nullable=False),
    sa.Column('confidence_score', sa.Numeric(precision=5, scale=4), nullable=True),
    sa.Column('input_features', sa.JSON(), nullable=True),
    sa.Column('is_validated', sa.Boolean(), nullable=True),
    sa.Column('validation_result', sa.Boolean(), nullable=True),
    sa.Column('validation_date', sa.DateTime(), nullable=True),
    sa.Column('validated_by', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['predictive_models.id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.ForeignKeyConstraint(['validated_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_model_predictions_id'), 'model_predictions', ['id'], unique=False)
    op.create_table('visiting_hours',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('clinic_id', sa.Integer(), nullable=False),
    sa.Column('department_id', sa.Integer(), nullable=True),
    sa.Column('day_of_week', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('max_visitors_per_patient', sa.Integer(), nullable=True),
    sa.Column('max_visit_duration', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('special_conditions', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinics.id'], ),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_visiting_hours_id'), 'visiting_hours', ['id'], unique=False)
    op.create_table('patient_satisfaction_surveys',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('clinic_id', sa.Integer(), nullable=False),
    sa.Column('patient_id', sa.Integer(), nullable=False),
    sa.Column('appointment_id', sa.Integer(), nullable=True),
    sa.Column('survey_date', sa.DateTime(), nullable=True),
    sa.Column('overall_satisfaction', sa.Integer(), nullable=True),
    sa.Column('wait_time_rating', sa.Integer(), nullable=True),
    sa.Column('staff_courtesy_rating', sa.Integer(), nullable=True),
    sa.Column('facility_cleanliness_rating', sa.Integer(), nullable=True),
    sa.Column('doctor_communication_rating', sa.Integer(), nullable=True),
    sa.Column('treatment_explanation_rating', sa.Integer(), nullable=True),
    sa.Column('positive_feedback', sa.Text(), nullable=True),
    sa.Column('negative_feedback', sa.Text(), nullable=True),
    sa.Column('suggestions', sa.Text(), nullable=True),
    sa.Column('would_recommend', sa.Boolean(), nullable=True),
    sa.Column('likelihood_to_return', sa.Integer(), nullable=True),
    sa.Column('contact_permission', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['appointment_id'], ['appointments.id'], ),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinics.id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_patient_satisfaction_surveys_id'), 'patient_satisfaction_surveys', ['id'], unique=False)
    op.create_table('visitor_entries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('clinic_id', sa.Integer(), nullable=False),
    sa.Column('visitor_id', sa.Integer(), nullable=True),
    sa.Column('companion_id', sa.Integer(), nullable=True),
    sa.Column('patient_id', sa.Integer(), nullable=False),
    sa.Column('entry_time', sa.DateTime(), nullable=True),
    sa.Column('exit_time', sa.DateTime(), nullable=True),
    sa.Column('visit_purpose', sa.String(length=255), nullable=True),
    sa.Column('authorized_by', sa.Integer(), nullable=True),
    sa.Column('badge_number', sa.String(length=50), nullable=True),
    sa.Column('badge_returned', sa.Boolean(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['authorized_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinics.id'], ),
    sa.ForeignKeyConstraint(['companion_id'], ['companions.id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.ForeignKeyConstraint(['visitor_id'], ['visitors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_visitor_entries_id'), 'visitor_entries', ['id'], unique=False)
    op.create_table('device_readings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('device_id', sa.Integer(), nullable=False),
    sa.Column('patient_id', sa.Integer(), nullable=True),
    sa.Column('reading_time', sa.DateTime(), nullable=True),
    sa.Column('reading_type', sa.String(length=100), nullable=False),
    sa.Column('value', sa.String(length=255), nullable=False),
    sa.Column('unit', sa.String(length=20), nullable=False),
    sa.Column('additional_data', sa.JSON(), nullable=True),
    sa.Column('is_valid', sa.Boolean(), nullable=True),
    sa.Column('validation_notes', sa.Text(), nullable=True),
    sa.Column('processed_by', sa.Integer(), nullable=True),
    sa.Column('integrated_to_record', sa.Boolean(), nullable=True),
    sa.Column('medical_record_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['medical_devices.id'], ),
    sa.ForeignKeyConstraint(['medical_record_id'], ['medical_records.id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.ForeignKeyConstraint(['processed_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_device_readings_id'), 'device_readings', ['id'], unique=False)
    op.drop_index(op.f('idx_alert_configurations_clinic'), table_name='alert_configurations')
    op.add_column('audit_logs', sa.Column('clinic_id', sa.Integer(), nullable=False))
    op.add_column('audit_logs', sa.Column('timestamp', sa.DateTime(), nullable=False))
    op.alter_column('audit_logs', 'action',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('audit_logs', 'table_name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('audit_logs', 'old_values',
               existing_type=sa.TEXT(),
               type_=sa.JSON(),
               existing_nullable=True,
               postgresql_using='old_values::json')
    op.alter_column('audit_logs', 'new_values',
               existing_type=sa.TEXT(),
               type_=sa.JSON(),
               existing_nullable=True,
               postgresql_using='new_values::json')
    op.alter_column('audit_logs', 'user_agent',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
    op.create_foreign_key(None, 'audit_logs', 'clinics', ['clinic_id'], ['id'])
    op.drop_column('audit_logs', 'created_at')
    op.drop_index(op.f('idx_bi_alerts_clinic_active'), table_name='bi_alerts')
    op.drop_index(op.f('idx_custom_dashboards_clinic_user'), table_name='custom_dashboards')
    op.drop_index(op.f('idx_performance_metrics_clinic_date'), table_name='performance_metrics')
    op.drop_index(op.f('idx_performance_metrics_type'), table_name='performance_metrics')
    op.add_column('product_categories', sa.Column('clinic_id', sa.Integer(), nullable=True))
    op.add_column('product_categories', sa.Column('department', sa.String(), nullable=True))
    op.add_column('product_categories', sa.Column('parent_category_id', sa.Integer(), nullable=True))
    op.add_column('product_categories', sa.Column('category_code', sa.String(), nullable=True))
    op.add_column('product_categories', sa.Column('requires_authorization', sa.Boolean(), nullable=True))
    op.create_unique_constraint(None, 'product_categories', ['category_code'])
    op.create_foreign_key(None, 'product_categories', 'clinics', ['clinic_id'], ['id'])
    op.create_foreign_key(None, 'product_categories', 'product_categories', ['parent_category_id'], ['id'])
    op.add_column('products', sa.Column('product_type', sa.String(), nullable=True))
    op.add_column('products', sa.Column('department_category', sa.String(), nullable=True))
    op.add_column('products', sa.Column('supplier_code', sa.String(), nullable=True))
    op.add_column('products', sa.Column('ncm_code', sa.String(), nullable=True))
    op.add_column('products', sa.Column('requires_batch_control', sa.Boolean(), nullable=True))
    op.add_column('products', sa.Column('shelf_life_days', sa.Integer(), nullable=True))
    op.add_column('products', sa.Column('storage_temperature', sa.String(), nullable=True))
    op.add_column('products', sa.Column('criticality_level', sa.String(), nullable=True))
    op.drop_index(op.f('idx_report_executions_date'), table_name='report_executions')
    op.drop_index(op.f('idx_saved_reports_clinic_type'), table_name='saved_reports')
    op.add_column('suppliers', sa.Column('cnpj_cpf', sa.String(length=20), nullable=True))
    op.add_column('suppliers', sa.Column('category', sa.String(length=50), nullable=True))
    op.add_column('suppliers', sa.Column('payment_terms', sa.String(length=100), nullable=True))
    op.add_column('suppliers', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.alter_column('suppliers', 'clinic_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('suppliers', 'name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_index(op.f('ix_suppliers_name'), table_name='suppliers')
    op.drop_column('suppliers', 'state')
    op.drop_column('suppliers', 'cnpj')
    op.drop_column('suppliers', 'city')
    op.drop_column('suppliers', 'zip_code')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('suppliers', sa.Column('zip_code', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('suppliers', sa.Column('city', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('suppliers', sa.Column('cnpj', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('suppliers', sa.Column('state', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.create_index(op.f('ix_suppliers_name'), 'suppliers', ['name'], unique=False)
    op.alter_column('suppliers', 'name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('suppliers', 'clinic_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('suppliers', 'updated_at')
    op.drop_column('suppliers', 'payment_terms')
    op.drop_column('suppliers', 'category')
    op.drop_column('suppliers', 'cnpj_cpf')
    op.create_index(op.f('idx_saved_reports_clinic_type'), 'saved_reports', ['clinic_id', 'report_type'], unique=False)
    op.create_index(op.f('idx_report_executions_date'), 'report_executions', ['execution_date'], unique=False)
    op.drop_column('products', 'criticality_level')
    op.drop_column('products', 'storage_temperature')
    op.drop_column('products', 'shelf_life_days')
    op.drop_column('products', 'requires_batch_control')
    op.drop_column('products', 'ncm_code')
    op.drop_column('products', 'supplier_code')
    op.drop_column('products', 'department_category')
    op.drop_column('products', 'product_type')
    op.drop_constraint(None, 'product_categories', type_='foreignkey')
    op.drop_constraint(None, 'product_categories', type_='foreignkey')
    op.drop_constraint(None, 'product_categories', type_='unique')
    op.drop_column('product_categories', 'requires_authorization')
    op.drop_column('product_categories', 'category_code')
    op.drop_column('product_categories', 'parent_category_id')
    op.drop_column('product_categories', 'department')
    op.drop_column('product_categories', 'clinic_id')
    op.create_index(op.f('idx_performance_metrics_type'), 'performance_metrics', ['metric_type'], unique=False)
    op.create_index(op.f('idx_performance_metrics_clinic_date'), 'performance_metrics', ['clinic_id', 'metric_date'], unique=False)
    op.create_index(op.f('idx_custom_dashboards_clinic_user'), 'custom_dashboards', ['clinic_id', 'user_id'], unique=False)
    op.create_index(op.f('idx_bi_alerts_clinic_active'), 'bi_alerts', ['clinic_id', 'is_active'], unique=False)
    op.add_column('audit_logs', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'audit_logs', type_='foreignkey')
    op.alter_column('audit_logs', 'user_agent',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('audit_logs', 'new_values',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('audit_logs', 'old_values',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('audit_logs', 'table_name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('audit_logs', 'action',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('audit_logs', 'timestamp')
    op.drop_column('audit_logs', 'clinic_id')
    op.create_index(op.f('idx_alert_configurations_clinic'), 'alert_configurations', ['clinic_id', 'is_active'], unique=False)
    op.drop_index(op.f('ix_device_readings_id'), table_name='device_readings')
    op.drop_table('device_readings')
    op.drop_index(op.f('ix_visitor_entries_id'), table_name='visitor_entries')
    op.drop_table('visitor_entries')
    op.drop_index(op.f('ix_patient_satisfaction_surveys_id'), table_name='patient_satisfaction_surveys')
    op.drop_table('patient_satisfaction_surveys')
    op.drop_index(op.f('ix_visiting_hours_id'), table_name='visiting_hours')
    op.drop_table('visiting_hours')
    op.drop_index(op.f('ix_model_predictions_id'), table_name='model_predictions')
    op.drop_table('model_predictions')
    op.drop_index(op.f('ix_device_integrations_id'), table_name='device_integrations')
    op.drop_table('device_integrations')
    op.drop_index(op.f('ix_companions_id'), table_name='companions')
    op.drop_index(op.f('ix_companions_cpf'), table_name='companions')
    op.drop_table('companions')
    op.drop_index(op.f('ix_scheduling_optimizations_id'), table_name='scheduling_optimizations')
    op.drop_table('scheduling_optimizations')
    op.drop_index(op.f('ix_predictive_models_id'), table_name='predictive_models')
    op.drop_table('predictive_models')
    op.drop_index(op.f('ix_medical_devices_serial_number'), table_name='medical_devices')
    op.drop_index(op.f('ix_medical_devices_id'), table_name='medical_devices')
    op.drop_table('medical_devices')
    op.drop_index(op.f('ix_diagnostic_patterns_id'), table_name='diagnostic_patterns')
    op.drop_table('diagnostic_patterns')
    op.drop_index(op.f('ix_visitors_id'), table_name='visitors')
    op.drop_index(op.f('ix_visitors_cpf'), table_name='visitors')
    op.drop_table('visitors')
    # ### end Alembic commands ###