"""Add telemedicine models

Revision ID: de3dccdb9fb0
Revises: 007
Create Date: 2025-08-08 16:35:45.033786

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'de3dccdb9fb0'
down_revision = '007'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_alert_configurations_clinic'), table_name='alert_configurations')
    op.add_column('audit_logs', sa.Column('clinic_id', sa.Integer(), nullable=False))
    op.add_column('audit_logs', sa.Column('timestamp', sa.DateTime(), nullable=False))
    op.alter_column('audit_logs', 'action',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('audit_logs', 'table_name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.execute("ALTER TABLE audit_logs ALTER COLUMN old_values TYPE JSON USING old_values::json")
    op.execute("ALTER TABLE audit_logs ALTER COLUMN new_values TYPE JSON USING new_values::json")
    op.alter_column('audit_logs', 'user_agent',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
    op.create_foreign_key(None, 'audit_logs', 'clinics', ['clinic_id'], ['id'])
    op.drop_column('audit_logs', 'created_at')
    op.drop_index(op.f('idx_bi_alerts_clinic_active'), table_name='bi_alerts')
    op.drop_index(op.f('idx_custom_dashboards_clinic_user'), table_name='custom_dashboards')
    op.drop_index(op.f('idx_performance_metrics_clinic_date'), table_name='performance_metrics')
    op.drop_index(op.f('idx_performance_metrics_type'), table_name='performance_metrics')
    op.add_column('product_categories', sa.Column('clinic_id', sa.Integer(), nullable=True))
    op.add_column('product_categories', sa.Column('department', sa.String(), nullable=True))
    op.add_column('product_categories', sa.Column('parent_category_id', sa.Integer(), nullable=True))
    op.add_column('product_categories', sa.Column('category_code', sa.String(), nullable=True))
    op.add_column('product_categories', sa.Column('requires_authorization', sa.Boolean(), nullable=True))
    op.create_unique_constraint(None, 'product_categories', ['category_code'])
    op.create_foreign_key(None, 'product_categories', 'product_categories', ['parent_category_id'], ['id'])
    op.create_foreign_key(None, 'product_categories', 'clinics', ['clinic_id'], ['id'])
    op.add_column('products', sa.Column('product_type', sa.String(), nullable=True))
    op.add_column('products', sa.Column('department_category', sa.String(), nullable=True))
    op.add_column('products', sa.Column('supplier_code', sa.String(), nullable=True))
    op.add_column('products', sa.Column('ncm_code', sa.String(), nullable=True))
    op.add_column('products', sa.Column('requires_batch_control', sa.Boolean(), nullable=True))
    op.add_column('products', sa.Column('shelf_life_days', sa.Integer(), nullable=True))
    op.add_column('products', sa.Column('storage_temperature', sa.String(), nullable=True))
    op.add_column('products', sa.Column('criticality_level', sa.String(), nullable=True))
    op.drop_index(op.f('idx_report_executions_date'), table_name='report_executions')
    op.drop_index(op.f('idx_saved_reports_clinic_type'), table_name='saved_reports')
    op.add_column('suppliers', sa.Column('cnpj_cpf', sa.String(length=20), nullable=True))
    op.add_column('suppliers', sa.Column('category', sa.String(length=50), nullable=True))
    op.add_column('suppliers', sa.Column('payment_terms', sa.String(length=100), nullable=True))
    op.add_column('suppliers', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.alter_column('suppliers', 'clinic_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('suppliers', 'name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_index(op.f('ix_suppliers_name'), table_name='suppliers')
    op.drop_column('suppliers', 'city')
    op.drop_column('suppliers', 'cnpj')
    op.drop_column('suppliers', 'state')
    op.drop_column('suppliers', 'zip_code')
    
    # Create telemedicine tables
    op.create_table('telemedicine_rooms',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('room_url', sa.String(length=500), nullable=False),
    sa.Column('room_id', sa.String(length=100), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('max_participants', sa.Integer(), nullable=True),
    sa.Column('is_recording', sa.Boolean(), nullable=True),
    sa.Column('recording_url', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('clinic_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinics.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('teleconsultations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('patient_id', sa.Integer(), nullable=False),
    sa.Column('doctor_id', sa.Integer(), nullable=False),
    sa.Column('room_id', sa.Integer(), nullable=False),
    sa.Column('scheduled_datetime', sa.DateTime(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('ended_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('consultation_type', sa.String(length=50), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('prescription_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('clinic_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinics.id'], ),
    sa.ForeignKeyConstraint(['doctor_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.ForeignKeyConstraint(['room_id'], ['telemedicine_rooms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('teleconsultation_participants',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('teleconsultation_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('patient_id', sa.Integer(), nullable=True),
    sa.Column('participant_type', sa.String(length=20), nullable=False),
    sa.Column('joined_at', sa.DateTime(), nullable=True),
    sa.Column('left_at', sa.DateTime(), nullable=True),
    sa.Column('connection_status', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.ForeignKeyConstraint(['teleconsultation_id'], ['teleconsultations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('shared_documents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('teleconsultation_id', sa.Integer(), nullable=False),
    sa.Column('document_name', sa.String(length=200), nullable=False),
    sa.Column('document_path', sa.String(length=500), nullable=False),
    sa.Column('document_type', sa.String(length=50), nullable=True),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('uploaded_by', sa.Integer(), nullable=False),
    sa.Column('uploaded_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['teleconsultation_id'], ['teleconsultations.id'], ),
    sa.ForeignKeyConstraint(['uploaded_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('remote_monitoring',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('patient_id', sa.Integer(), nullable=False),
    sa.Column('doctor_id', sa.Integer(), nullable=False),
    sa.Column('monitoring_type', sa.String(length=50), nullable=False),
    sa.Column('device_info', sa.JSON(), nullable=True),
    sa.Column('frequency', sa.String(length=50), nullable=True),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('alerts_enabled', sa.Boolean(), nullable=True),
    sa.Column('alert_thresholds', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('clinic_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinics.id'], ),
    sa.ForeignKeyConstraint(['doctor_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('vital_sign_readings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('monitoring_id', sa.Integer(), nullable=False),
    sa.Column('vital_sign_type', sa.String(length=50), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(length=20), nullable=False),
    sa.Column('reading_datetime', sa.DateTime(), nullable=False),
    sa.Column('device_id', sa.String(length=100), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('is_alert', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['monitoring_id'], ['remote_monitoring.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('medication_adherence_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('patient_id', sa.Integer(), nullable=False),
    sa.Column('medication_name', sa.String(length=200), nullable=False),
    sa.Column('prescribed_dosage', sa.String(length=100), nullable=False),
    sa.Column('taken_datetime', sa.DateTime(), nullable=True),
    sa.Column('scheduled_datetime', sa.DateTime(), nullable=False),
    sa.Column('adherence_status', sa.String(length=20), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('reported_by', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('clinic_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinics.id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('digital_prescriptions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('patient_id', sa.Integer(), nullable=False),
    sa.Column('doctor_id', sa.Integer(), nullable=False),
    sa.Column('teleconsultation_id', sa.Integer(), nullable=True),
    sa.Column('prescription_number', sa.String(length=50), nullable=False),
    sa.Column('issue_date', sa.Date(), nullable=False),
    sa.Column('validity_date', sa.Date(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('digital_signature', sa.Text(), nullable=True),
    sa.Column('qr_code', sa.Text(), nullable=True),
    sa.Column('dispensed_at', sa.DateTime(), nullable=True),
    sa.Column('dispensed_by', sa.String(length=200), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('clinic_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinics.id'], ),
    sa.ForeignKeyConstraint(['doctor_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.ForeignKeyConstraint(['teleconsultation_id'], ['teleconsultations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('digital_prescription_medications',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('prescription_id', sa.Integer(), nullable=False),
    sa.Column('medication_name', sa.String(length=200), nullable=False),
    sa.Column('dosage', sa.String(length=100), nullable=False),
    sa.Column('frequency', sa.String(length=100), nullable=False),
    sa.Column('duration', sa.String(length=100), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=True),
    sa.Column('instructions', sa.Text(), nullable=True),
    sa.Column('generic_substitution_allowed', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['prescription_id'], ['digital_prescriptions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('suppliers', sa.Column('zip_code', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('suppliers', sa.Column('state', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('suppliers', sa.Column('cnpj', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('suppliers', sa.Column('city', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.create_index(op.f('ix_suppliers_name'), 'suppliers', ['name'], unique=False)
    op.alter_column('suppliers', 'name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('suppliers', 'clinic_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('suppliers', 'updated_at')
    op.drop_column('suppliers', 'payment_terms')
    op.drop_column('suppliers', 'category')
    op.drop_column('suppliers', 'cnpj_cpf')
    op.create_index(op.f('idx_saved_reports_clinic_type'), 'saved_reports', ['clinic_id', 'report_type'], unique=False)
    op.create_index(op.f('idx_report_executions_date'), 'report_executions', ['execution_date'], unique=False)
    op.drop_column('products', 'criticality_level')
    op.drop_column('products', 'storage_temperature')
    op.drop_column('products', 'shelf_life_days')
    op.drop_column('products', 'requires_batch_control')
    op.drop_column('products', 'ncm_code')
    op.drop_column('products', 'supplier_code')
    op.drop_column('products', 'department_category')
    op.drop_column('products', 'product_type')
    op.drop_constraint(None, 'product_categories', type_='foreignkey')
    op.drop_constraint(None, 'product_categories', type_='foreignkey')
    op.drop_constraint(None, 'product_categories', type_='unique')
    op.drop_column('product_categories', 'requires_authorization')
    op.drop_column('product_categories', 'category_code')
    op.drop_column('product_categories', 'parent_category_id')
    op.drop_column('product_categories', 'department')
    op.drop_column('product_categories', 'clinic_id')
    op.create_index(op.f('idx_performance_metrics_type'), 'performance_metrics', ['metric_type'], unique=False)
    op.create_index(op.f('idx_performance_metrics_clinic_date'), 'performance_metrics', ['clinic_id', 'metric_date'], unique=False)
    op.create_index(op.f('idx_custom_dashboards_clinic_user'), 'custom_dashboards', ['clinic_id', 'user_id'], unique=False)
    op.create_index(op.f('idx_bi_alerts_clinic_active'), 'bi_alerts', ['clinic_id', 'is_active'], unique=False)
    op.add_column('audit_logs', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'audit_logs', type_='foreignkey')
    op.alter_column('audit_logs', 'user_agent',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('audit_logs', 'new_values',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('audit_logs', 'old_values',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('audit_logs', 'table_name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('audit_logs', 'action',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('audit_logs', 'timestamp')
    op.drop_column('audit_logs', 'clinic_id')
    op.create_index(op.f('idx_alert_configurations_clinic'), 'alert_configurations', ['clinic_id', 'is_active'], unique=False)
    # ### end Alembic commands ###