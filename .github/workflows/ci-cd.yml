name: DataClinica CI/CD Pipeline

# Trigger do workflow
on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

# Variáveis de ambiente globais
env:
  DOCKER_REGISTRY: dataclinica.azurecr.io
  PROJECT_NAME: dataclinica
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # =============================================================================
  # TESTES E QUALIDADE DE CÓDIGO
  # =============================================================================
  
  test-backend:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dataclinica_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest-cov pytest-asyncio
      
      - name: 🔍 Lint with flake8
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      
      - name: 🎨 Check code formatting
        run: |
          cd backend
          black --check .
          isort --check-only .
      
      - name: 🔒 Security check with bandit
        run: |
          cd backend
          bandit -r . -f json -o bandit-report.json || true
      
      - name: 🧪 Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dataclinica_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          JWT_SECRET_KEY: test-jwt-secret
          ENVIRONMENT: test
        run: |
          cd backend
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
      
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  test-frontend:
    name: ⚛️ Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 📦 Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: 🔍 Lint code
        run: |
          cd frontend
          npm run lint
      
      - name: 🎨 Check code formatting
        run: |
          cd frontend
          npm run format:check
      
      - name: 🔒 Security audit
        run: |
          cd frontend
          npm audit --audit-level=high
      
      - name: 🧪 Run tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false
      
      - name: 🏗️ Build application
        run: |
          cd frontend
          npm run build
      
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  test-e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐳 Start services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: e2e/package-lock.json
      
      - name: 📦 Install E2E dependencies
        run: |
          cd e2e
          npm ci
          npx playwright install
      
      - name: 🎭 Run E2E tests
        run: |
          cd e2e
          npm run test
      
      - name: 📊 Upload E2E results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results
          path: e2e/test-results/
      
      - name: 🧹 Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # =============================================================================
  # BUILD E DEPLOY
  # =============================================================================
  
  build-images:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      version: ${{ steps.meta.outputs.version }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: 📋 Extract metadata
        id: meta
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "version=latest" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/heads/staging ]]; then
            echo "version=staging" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "version=develop" >> $GITHUB_OUTPUT
            echo "environment=development" >> $GITHUB_OUTPUT
          fi
      
      - name: 📋 Backend metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.PROJECT_NAME }}/backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=${{ steps.meta.outputs.version }}
      
      - name: 🏗️ Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 📋 Frontend metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.PROJECT_NAME }}/frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=${{ steps.meta.outputs.version }}
      
      - name: 🏗️ Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/staging'
    environment:
      name: staging
      url: https://staging.dataclinica.com.br
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: 🔐 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: 🚀 Deploy to ECS Staging
        run: |
          # Atualizar task definition
          aws ecs update-service \
            --cluster dataclinica-staging \
            --service dataclinica-backend-staging \
            --force-new-deployment
          
          aws ecs update-service \
            --cluster dataclinica-staging \
            --service dataclinica-frontend-staging \
            --force-new-deployment
      
      - name: ⏳ Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster dataclinica-staging \
            --services dataclinica-backend-staging dataclinica-frontend-staging
      
      - name: 🧪 Run smoke tests
        run: |
          curl -f https://staging-api.dataclinica.com.br/health || exit 1
          curl -f https://staging.dataclinica.com.br || exit 1
      
      - name: 📢 Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://dataclinica.com.br
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1
      
      - name: 🔐 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: 💾 Backup database
        run: |
          aws rds create-db-snapshot \
            --db-instance-identifier dataclinica-prod \
            --db-snapshot-identifier dataclinica-prod-$(date +%Y%m%d%H%M%S)
      
      - name: 🚀 Deploy to ECS Production
        run: |
          # Blue/Green deployment
          aws ecs update-service \
            --cluster dataclinica-production \
            --service dataclinica-backend-production \
            --force-new-deployment
          
          aws ecs update-service \
            --cluster dataclinica-production \
            --service dataclinica-frontend-production \
            --force-new-deployment
      
      - name: ⏳ Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster dataclinica-production \
            --services dataclinica-backend-production dataclinica-frontend-production
      
      - name: 🧪 Run production smoke tests
        run: |
          curl -f https://api.dataclinica.com.br/health || exit 1
          curl -f https://dataclinica.com.br || exit 1
      
      - name: 📊 Update monitoring
        run: |
          # Atualizar dashboards e alertas
          echo "Updating monitoring dashboards..."
      
      - name: 📢 Notify successful deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '🎉 DataClinica deployed to production successfully!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      
      - name: 📢 Notify failed deployment
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: '❌ DataClinica production deployment failed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: failure()

  # =============================================================================
   # SEGURANÇA E MONITORAMENTO
   # =============================================================================
   
   security-scan:
     name: 🔒 Security Scan
     runs-on: ubuntu-latest
     needs: [test-backend, test-frontend]
     
     steps:
       - name: 📥 Checkout code
         uses: actions/checkout@v4
       
       - name: 🔍 Run Trivy vulnerability scanner
         uses: aquasecurity/trivy-action@master
         with:
           scan-type: 'fs'
           scan-ref: '.'
           format: 'sarif'
           output: 'trivy-results.sarif'
       
       - name: 📊 Upload Trivy scan results
         uses: github/codeql-action/upload-sarif@v3
         with:
           sarif_file: 'trivy-results.sarif'
       
       - name: 🔒 Initialize CodeQL
         uses: github/codeql-action/init@v3
         with:
           languages: python, javascript
       
       - name: 🔍 Perform CodeQL Analysis
         uses: github/codeql-action/analyze@v3
       
       - name: 🔐 OWASP Dependency Check
         uses: dependency-check/Dependency-Check_Action@main
         with:
           project: 'DataClinica'
           path: '.'
           format: 'ALL'
       
       - name: 📊 Upload OWASP results
         uses: actions/upload-artifact@v3
         with:
           name: dependency-check-report
           path: reports/

   performance-test:
     name: ⚡ Performance Tests
     runs-on: ubuntu-latest
     needs: [build-images]
     if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
     
     steps:
       - name: 📥 Checkout code
         uses: actions/checkout@v4
       
       - name: 📦 Setup Node.js
         uses: actions/setup-node@v4
         with:
           node-version: ${{ env.NODE_VERSION }}
       
       - name: 📦 Install Artillery
         run: npm install -g artillery@latest
       
       - name: 🐳 Start test environment
         run: |
           docker-compose -f docker-compose.test.yml up -d
           sleep 60
       
       - name: ⚡ Run load tests
         run: |
           artillery run tests/performance/load-test.yml
       
       - name: 📊 Generate performance report
         run: |
           artillery report --output performance-report.html artillery_report_*.json
       
       - name: 📊 Upload performance results
         uses: actions/upload-artifact@v3
         with:
           name: performance-report
           path: performance-report.html
       
       - name: 🧹 Cleanup
         if: always()
         run: docker-compose -f docker-compose.test.yml down

   monitoring-setup:
     name: 📊 Setup Monitoring
     runs-on: ubuntu-latest
     needs: [deploy-production]
     if: github.ref == 'refs/heads/main'
     
     steps:
       - name: 📥 Checkout code
         uses: actions/checkout@v4
       
       - name: ⚙️ Configure AWS credentials
         uses: aws-actions/configure-aws-credentials@v4
         with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
           aws-region: us-east-1
       
       - name: 📊 Update CloudWatch dashboards
         run: |
           aws cloudwatch put-dashboard \
             --dashboard-name "DataClinica-Production" \
             --dashboard-body file://monitoring/cloudwatch-dashboard.json
       
       - name: 🚨 Setup CloudWatch alarms
         run: |
           aws cloudwatch put-metric-alarm \
             --alarm-name "DataClinica-HighCPU" \
             --alarm-description "High CPU utilization" \
             --metric-name CPUUtilization \
             --namespace AWS/ECS \
             --statistic Average \
             --period 300 \
             --threshold 80 \
             --comparison-operator GreaterThanThreshold \
             --evaluation-periods 2
       
       - name: 📈 Update Grafana dashboards
         run: |
           curl -X POST \
             -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
             -H "Content-Type: application/json" \
             -d @monitoring/grafana-dashboard.json \
             "${{ secrets.GRAFANA_URL }}/api/dashboards/db"

   # =============================================================================
   # NOTIFICAÇÕES E RELATÓRIOS
   # =============================================================================
   
   notify-completion:
     name: 📢 Notify Completion
     runs-on: ubuntu-latest
     needs: [deploy-production, security-scan, performance-test, monitoring-setup]
     if: always() && github.ref == 'refs/heads/main'
     
     steps:
       - name: 📊 Generate deployment report
         run: |
           echo "# 🚀 DataClinica Deployment Report" > deployment-report.md
           echo "" >> deployment-report.md
           echo "**Date:** $(date)" >> deployment-report.md
           echo "**Commit:** ${{ github.sha }}" >> deployment-report.md
           echo "**Branch:** ${{ github.ref_name }}" >> deployment-report.md
           echo "" >> deployment-report.md
           echo "## 📋 Status" >> deployment-report.md
           echo "- ✅ Backend Tests: ${{ needs.test-backend.result }}" >> deployment-report.md
           echo "- ✅ Frontend Tests: ${{ needs.test-frontend.result }}" >> deployment-report.md
           echo "- 🐳 Build Images: ${{ needs.build-images.result }}" >> deployment-report.md
           echo "- 🚀 Production Deploy: ${{ needs.deploy-production.result }}" >> deployment-report.md
           echo "- 🔒 Security Scan: ${{ needs.security-scan.result }}" >> deployment-report.md
           echo "- ⚡ Performance Test: ${{ needs.performance-test.result }}" >> deployment-report.md
       
       - name: 📧 Send email notification
         uses: dawidd6/action-send-mail@v3
         with:
           server_address: ${{ secrets.SMTP_SERVER }}
           server_port: ${{ secrets.SMTP_PORT }}
           username: ${{ secrets.SMTP_USERNAME }}
           password: ${{ secrets.SMTP_PASSWORD }}
           subject: '🚀 DataClinica Production Deployment - ${{ github.ref_name }}'
           body: file://deployment-report.md
           to: ${{ secrets.NOTIFICATION_EMAIL }}
           from: 'DataClinica CI/CD <noreply@dataclinica.com.br>'
       
       - name: 📱 Send Teams notification
         uses: skitionek/notify-microsoft-teams@master
         with:
           webhook_url: ${{ secrets.TEAMS_WEBHOOK }}
           overwrite: |
             {
               "@type": "MessageCard",
               "@context": "https://schema.org/extensions",
               "summary": "DataClinica Deployment",
               "themeColor": "0078D4",
               "sections": [{
                 "activityTitle": "🚀 DataClinica Production Deployment",
                 "activitySubtitle": "Commit: ${{ github.sha }}",
                 "facts": [{
                   "name": "Status",
                   "value": "${{ job.status }}"
                 }, {
                   "name": "Branch",
                   "value": "${{ github.ref_name }}"
                 }, {
                   "name": "Environment",
                   "value": "Production"
                 }]
               }]
             }
       
       - name: 📊 Update status page
         run: |
           curl -X POST \
             -H "Authorization: Bearer ${{ secrets.STATUS_PAGE_API_KEY }}" \
             -H "Content-Type: application/json" \
             -d '{"status": "operational", "message": "Deployment completed successfully"}' \
             "${{ secrets.STATUS_PAGE_URL }}/api/incidents"